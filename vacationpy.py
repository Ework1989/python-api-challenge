# -*- coding: utf-8 -*-
"""VacationPy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hY4wY4E0TBzRofYsulUE38cpO4o4I2Fg

# VacationPy
---

## Starter Code to Import Libraries and Load the Weather and Coordinates Data
"""

# Dependencies and Setup
import hvplot.pandas
import pandas as pd
import requests
from pathlib import Path

# Import API key
from api_keys import geoapify_key

# Load the CSV file created in Part 1 into a Pandas DataFrame
csv_file = Path("/content/cities.csv")
city_data_df = pd.read_csv(csv_file)

# Display sample data
city_data_df.head()

"""---

### Step 1: Create a map that displays a point for every city in the `city_data_df` DataFrame. The size of the point should be the humidity in each city.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture --no-display
# 
# # Configure the map plot
# city_data_df.hvplot.scatter(
#     x='Longitude',
#     y='Latitude',
#     c='Humidity',
#     colormap='viridis',
#     title='City Map with Humidity',
#     hover_cols=['City', 'Humidity'],
#     size='Humidity',
#     frame_width=700,
#     frame_height=500
# )
#

"""### Step 2: Narrow down the `city_data_df` DataFrame to find your ideal weather condition"""

# Specify your ideal weather conditions
ideal_conditions = (city_data_df['Max Temperature'] < 27) & (city_data_df['Max Temperature'] > 21) & \
                   (city_data_df['Wind Speed'] < 4.5) & (city_data_df['Cloudiness'] == 0)

# Narrow down the DataFrame based on ideal conditions
ideal_cities_df = city_data_df[ideal_conditions]
city_data_df.head()

"""### Step 3: Create a new DataFrame called `hotel_df`."""

# Use the Pandas copy function to create DataFrame called hotel_df
hotel_df = ideal_cities_df.copy()

# Add an empty column, "Hotel Name," to the DataFrame
hotel_df['Hotel Name'] = ''

# Display sample data
hotel_df.head()

"""### Step 4: For each city, use the Geoapify API to find the first hotel located within 10,000 metres of your coordinates."""

# Set parameters to search for a hotel
radius = 10000  # Set your preferred radius (in meters)
params = {
    "type": "lodging",  # Specify the type of place you're looking for (e.g., lodging for hotels)
}

# Print a message to follow up the hotel search
print("Starting hotel search")

# Iterate through the hotel_df DataFrame
for index, row in hotel_df.iterrows():
    # get latitude, longitude from the DataFrame
    latitude = row['Latitude']
    longitude = row['Longitude']

    # Add filter and bias parameters with the current city's latitude and longitude to the params dictionary
    params["filter"] = {"category_ids": "lodging"}  # Add additional filters if needed
    params["bias"] = {"lat": latitude, "lon": longitude}

    # Set base URL
    base_url = "https://api.geoapify.com/v2/places"

    # Make an API request using the params dictionary
    response = requests.get(base_url, params=params, headers={"Api-Key": geoapify_key})

    # Convert the API response to JSON format
    name_address = response.json()

    # Grab the first hotel from the results and store the name in the hotel_df DataFrame
    try:
        hotel_df.loc[index, "Hotel Name"] = name_address["features"][0]["properties"]["name"]
    except (KeyError, IndexError):
        # If no hotel is found, set the hotel name as "No hotel found".
        hotel_df.loc[index, "Hotel Name"] = "No hotel found"

    # Log the search results
    print(f"{hotel_df.loc[index, 'City']} - nearest hotel: {hotel_df.loc[index, 'Hotel Name']}")

# Display sample data
hotel_df

"""### Step 5: Add the hotel name and the country as additional information in the hover message for each city in the map."""

# Create a map with hotel information and size points based on humidity
hotel_df.hvplot.scatter(
    x='Longitude',
    y='Latitude',
    c='Humidity',
    colormap='viridis',
    title='Hotel Map with Humidity',
    hover_cols=['City', 'Country', 'Humidity', 'Hotel Name'],
    size='Humidity',
    frame_width=700,
    frame_height=500
)